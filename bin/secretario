#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'bundler'

Bundler.require :script, :bloat, :development

ENV['_ROOT'] = File.dirname(File.expand_path File.dirname(__FILE__))
ENV['RACK_ENV'] ||= 'development'

module Secretario
  def self.full_path which=nil, *args
    comps = [ENV['_ROOT']]
    comps += case which
      when :root then []
      when :app then ['app']
      when :lib then ['bin', 'lib']
      when :tmp then ['tmp', 'secretario']
    end
    comps += args unless args.empty?
    comps.join(File::SEPARATOR)
  end


  def self.require_dir base, extension: "*.rb", recursive: true
    pattern = [base]
    pattern << "**" if recursive
    pattern << extension unless extension.nil?

    Dir.glob(pattern.join(File::SEPARATOR)).each do |lib|
      require lib
    end
  end


  class Interface < Thor

    def initialize *args
      super(*args)
      # puts 'initialize'
    end

    Secretario.require_dir Secretario.full_path(:root, 'lib')
    Secretario.require_dir Secretario.full_path(:lib)

    Dir.glob("#{ENV['_ROOT']}/bin/tasks/*.rb").each do |task|
      require task
      name = File.basename(task, '.rb')
      klass = "Secretario::#{name.titleize}".constantize
      name = klass.command_name if klass.respond_to?(:command_name)

      desc "#{name} <subcomando> (argumentos)", klass.description
      subcommand name, klass
    end
  end
end

$secretario = Secretario::Interface.start(ARGV)